swagger: '2.0'
info:
  title: "Garage API"
  description: "API for managing an auto garage, including customers, inventory, mechanics, and service tickets."
  version: "1.0.0"
host: "127.0.0.1:5000"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""

definitions:
  ErrorResponse:
    type: object
    properties:
      error:
        type: string
        example: "Resource not found."
  ValidationErrorResponse:
    type: object
    properties:
      messages:
        type: object
        additionalProperties:
          type: array
          items:
            type: string
        example:
          email: ["Invalid email format.", "Email already exists."]
          password: ["Field may not be null."]
  MessageResponse:
    type: object
    properties:
      message:
        type: string
        example: "Operation successful."

  # Customer Definitions
  CustomerCore:
    type: object
    properties:
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        format: email
        example: "john.doe@example.com"
      phone:
        type: string
        example: "555-1234"
    required:
      - name
      - email

  CustomerPayload:
    allOf:
      - $ref: "#/definitions/CustomerCore"
      - type: object
        properties:
          password:
            type: string
            format: password
            example: "securePassword123"
            writeOnly: true
        required:
          - password

  CustomerResponse:
    allOf:
      - $ref: "#/definitions/CustomerCore"
      - type: object
        properties:
          id:
            type: integer
            format: int64
            readOnly: true
            example: 1
          tickets:
            type: array
            items:
              $ref: "#/definitions/ServiceTicketSummary"
            readOnly: true

  CustomerLoginPayload:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "john.doe@example.com"
      password:
        type: string
        format: password
        example: "securePassword123"
    required:
      - email
      - password

  CustomerLoginByIdPayload:
    type: object
    properties:
      password:
        type: string
        format: password
        example: "securePassword123"
    required:
      - password
      
  CustomerTicketsResponse:
    type: array
    items:
      $ref: "#/definitions/ServiceTicketResponse"

  # Mechanic Definitions
  MechanicCore:
    type: object
    properties:
      name:
        type: string
        example: "Jane Smith"
      email:
        type: string
        format: email
        example: "jane.smith@example.com"
      phone:
        type: string
        example: "555-5678"
      salary:
        type: string # Representing decimal as string
        example: "60000.00"
    required:
      - name
      - email
      - salary

  MechanicPayload:
    allOf:
      - $ref: "#/definitions/MechanicCore"
      - type: object
        properties:
          password:
            type: string
            format: password
            example: "anotherSecurePassword"
            writeOnly: true
        required:
          - password

  MechanicResponse:
    allOf:
      - $ref: "#/definitions/MechanicCore"
      - type: object
        properties:
          id:
            type: integer
            format: int64
            readOnly: true
            example: 1
          service_tickets:
            type: array
            items:
              $ref: "#/definitions/ServiceTicketSummary"
            readOnly: true

  MechanicLoginPayload:
    type: object
    properties:
      email:
        type: string
        format: email
        example: "jane.smith@example.com"
      password:
        type: string
        format: password
        example: "anotherSecurePassword"
    required:
      - email
      - password

  # Inventory Definitions
  InventoryItemCore:
    type: object
    properties:
      name:
        type: string
        example: "Spark Plug"
      price:
        type: string # Representing decimal as string
        example: "15.99"
    required:
      - name
      - price

  InventoryItemPayload:
    allOf:
      - $ref: "#/definitions/InventoryItemCore"

  InventoryItemResponse:
    allOf:
      - $ref: "#/definitions/InventoryItemCore"
      - type: object
        properties:
          id:
            type: integer
            format: int64
            readOnly: true
            example: 1

  InventoryItemSummary: # For nesting
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
        example: "Spark Plug"
      price:
        type: string
        example: "15.99"

  # Service Ticket Definitions
  ServiceTicketCore:
    type: object
    properties:
      vin:
        type: string
        example: "123ABC456DEF789GHI"
      service_date:
        type: string
        format: date
        example: "2024-07-26"
      service_desc:
        type: string
        example: "Oil change and tire rotation"
      customer_id:
        type: integer
        format: int64
        example: 1
    required:
      - vin
      - service_date
      - customer_id

  CreateServiceTicketPayload:
    allOf:
      - $ref: "#/definitions/ServiceTicketCore"

  ServiceTicketResponse:
    allOf:
      - $ref: "#/definitions/ServiceTicketCore"
      - type: object
        properties:
          id:
            type: integer
            format: int64
            readOnly: true
            example: 1
          customer:
            $ref: "#/definitions/CustomerSummaryForTicket"
            readOnly: true
          mechanics:
            type: array
            items:
              $ref: "#/definitions/MechanicSummaryForTicket"
            readOnly: true
          inventory:
            type: array
            items:
              $ref: "#/definitions/ServiceTicketInventoryItemResponse"
            readOnly: true

  ServiceTicketSummary: # For nesting in Customer/Mechanic
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      vin:
        type: string
        example: "123ABC456DEF789GHI"
      service_date:
        type: string
        format: date
        example: "2024-07-26"
      service_desc:
        type: string
        example: "Oil change and tire rotation"

  CustomerSummaryForTicket: # For nesting in ServiceTicket
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
        example: "John Doe"
      email:
        type: string
        format: email
        example: "john.doe@example.com"
      phone:
        type: string
        example: "555-1234"

  MechanicSummaryForTicket: # For nesting in ServiceTicket
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
        example: "Jane Smith"
      email:
        type: string
        format: email
        example: "jane.smith@example.com"
      phone:
        type: string
        example: "555-5678"
      salary:
        type: string
        example: "60000.00"

  ServiceTicketInventoryItemBase:
    type: object
    properties:
      inventory_id:
        type: integer
        format: int64
        example: 1
      quantity:
        type: integer
        example: 2
    required:
      - inventory_id
      - quantity

  ServiceTicketInventoryItemResponse: # For ServiceTicket.inventory list
    allOf:
      - $ref: "#/definitions/ServiceTicketInventoryItemBase"
      - type: object
        properties:
          id: # This is ServiceInventory.id
            type: integer
            format: int64
            readOnly: true
            example: 101 
          inventory:
            $ref: "#/definitions/InventoryItemSummary"
            readOnly: true

  AuthTokenResponse:
    type: object
    properties:
      status:
        type: string
        example: "success"
      message:
        type: string
        example: "Successfully Logged In"
      auth_token:
        type: string
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  EditServiceTicketMechanicsPayload:
    type: object
    properties:
      add_mechanic_ids:
        type: array
        items:
          type: integer
          format: int64
        example: [1, 2]
      remove_mechanic_ids:
        type: array
        items:
          type: integer
          format: int64
        example: [3]
    required:
      - add_mechanic_ids
      - remove_mechanic_ids

  EditServiceTicketInventoryPayload:
    type: object
    properties:
      items_to_add_or_update:
        type: array
        items:
          $ref: "#/definitions/ServiceTicketInventoryItemBase"
      remove_inventory_ids:
        type: array
        items:
          type: integer
          format: int64
        example: [10, 12]

  MessageWithTicketResponse:
    type: object
    properties:
      message:
        type: string
      ticket:
        $ref: "#/definitions/ServiceTicketResponse"

paths:
  /customers/login:
    post:
      tags:
        - Customers
      summary: "Login customer"
      description: "Authenticates a customer and returns an auth token."
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CustomerLoginPayload"
          examples:
            application/json:
              email: "john.doe@example.com"
              password: "securePassword123"
      responses:
        "200":
          description: "Login successful"
          schema:
            $ref: "#/definitions/AuthTokenResponse"
          examples:
            application/json:
              status: "success"
              message: "Successfully Logged In"
              auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          description: "Invalid payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid payload, expecting email and password"
        "401":
          description: "Invalid email or password"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid email or password"

  /customers/login_id/{customer_id}:
    post:
      tags:
        - Customers
      summary: "Login customer by ID"
      description: "Authenticates a customer by ID and password, returns an auth token."
      parameters:
        - name: customer_id
          in: path
          required: true
          type: integer
          format: int64
          description: "ID of the customer to login"
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CustomerLoginByIdPayload"
          examples:
            application/json:
              password: "securePassword123"
      responses:
        "200":
          description: "Login successful"
          schema: # The actual response includes a message and the AuthTokenResponse
            type: object
            properties:
              message:
                type: string
              response: # The route wraps the auth token response
                $ref: "#/definitions/AuthTokenResponse"
          examples:
            application/json:
              message: "Customer id: 1:"
              response:
                status: "success"
                message: "Successfully Logged In"
                auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          description: "Invalid payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid payload, expecting password"
        "401":
          description: "Invalid ID or password"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid id or password"

  /customers/:
    post:
      tags:
        - Customers
      summary: "Create a new customer"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CustomerPayload"
          examples:
            application/json:
              name: "Alice Wonderland"
              email: "alice.wonder@example.com"
              phone: "555-9876"
              password: "verySecurePassword"
      responses:
        "201":
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              id: 2
              name: "Alice Wonderland"
              email: "alice.wonder@example.com"
              phone: "555-9876"
              tickets: []
        "400":
          description: "Validation error or email already exists"
          schema:
            oneOf: # Can be general error or validation error
              - $ref: "#/definitions/ErrorResponse"
              - $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json: # Example for email exists
              error: "Email already associated with an account."
            application/json_validation: # Example for validation error
              messages:
                email: ["Not a valid email address."]
    get:
      tags:
        - Customers
      summary: "Get all customers"
      description: "Retrieves a list of all customers, with optional pagination."
      parameters:
        - name: page
          in: query
          type: integer
          description: "Page number for pagination"
        - name: per_page
          in: query
          type: integer
          description: "Number of items per page for pagination"
      responses:
        "200":
          description: "A list of customers"
          schema:
            type: array
            items:
              $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              - id: 1
                name: "John Doe"
                email: "john.doe@example.com"
                phone: "555-1234"
                tickets: []
              - id: 2
                name: "Alice Wonderland"
                email: "alice.wonder@example.com"
                phone: "555-9876"
                tickets: []

  /customers/{customer_id}:
    get:
      tags:
        - Customers
      summary: "Get customer by ID"
      parameters:
        - name: customer_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Customer details"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              email: "john.doe@example.com"
              phone: "555-1234"
              tickets: [
                {
                  "id": 101,
                  "vin": "VIN123XYZ",
                  "service_date": "2024-07-28",
                  "service_desc": "Annual Checkup"
                }
              ]
        "404":
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Customer Not Found."
    put:
      tags:
        - Customers
      summary: "Update customer by ID"
      parameters:
        - name: customer_id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CustomerPayload" # Password can be part of update
          examples:
            application/json:
              name: "Johnathan Doe"
              email: "john.doe.updated@example.com"
              phone: "555-1235"
              password: "newSecurePassword"
      responses:
        "200":
          description: "Customer updated successfully"
          schema:
            $ref: "#/definitions/CustomerResponse"
          examples:
            application/json:
              id: 1
              name: "Johnathan Doe"
              email: "john.doe.updated@example.com"
              phone: "555-1235"
              tickets: []
        "400":
          description: "Validation error"
          schema:
            $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json:
              messages:
                phone: ["Invalid phone number format."]
        "404":
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Customer not found."
    delete:
      tags:
        - Customers
      summary: "Delete customer by ID"
      security:
        - BearerAuth: []
      parameters:
        - name: customer_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Customer deleted successfully"
          schema:
            $ref: "#/definitions/MessageResponse"
          examples:
            application/json:
              message: "Customer id: 2 successfully deleted by user 1. Tickets reassigned to default customer (ID: 1)."
        "400":
          description: "Invalid customer ID format"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid customer ID format in URL."
        "403":
          description: "Cannot delete the default customer"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Cannot delete the default customer account."
        "404":
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Customer not found."
        "500":
          description: "System configuration error (default customer not found)"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "System configuration error: Default customer not found. Please contact support."

  /customers/my-tickets:
    get:
      tags:
        - Customers
      summary: "Get tickets for the authenticated customer"
      security:
        - BearerAuth: []
      responses:
        "200":
          description: "A list of service tickets for the customer"
          schema:
            $ref: "#/definitions/CustomerTicketsResponse"
          examples:
            application/json:
              - id: 101
                vin: "VIN123XYZ"
                service_date: "2024-07-28"
                service_desc: "Annual Checkup"
                customer_id: 1
                customer:
                  id: 1
                  name: "John Doe"
                  email: "john.doe@example.com"
                  phone: "555-1234"
                mechanics: [
                  {
                    id: 1,
                    name: "Mechanic Mike",
                    email: "mike@example.com",
                    phone: "555-0001",
                    salary: "70000.00"
                  }
                ]
                inventory: [
                  {
                    inventory_id: 1,
                    quantity: 1,
                    id: 201, # This is ServiceInventory.id
                    inventory: { # This is InventoryItemSummary
                      id: 1,
                      name: "Oil Filter",
                      price: "25.00"
                    }
                  }
                ]
        "404":
          description: "Customer not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              message: "Customer not found" # Route returns 'message' not 'error'

  /inventory/:
    post:
      tags:
        - Inventory
      summary: "Create a new inventory item"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/InventoryItemPayload"
          examples:
            application/json:
              name: "Air Filter"
              price: "22.50"
      responses:
        "201":
          description: "Inventory item created successfully"
          schema:
            $ref: "#/definitions/InventoryItemResponse"
          examples:
            application/json:
              id: 2
              name: "Air Filter"
              price: "22.50"
        "400":
          description: "Validation error, item exists, or missing price"
          schema:
            oneOf:
              - $ref: "#/definitions/ErrorResponse"
              - $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json_exists: # Example for item exists
              error: "Inventory item with name Air Filter already exists."
            application/json_missing_price: # Example for missing price
              error: "Missing 'price' in request data."
            application/json_validation: # Example for validation error
              messages:
                name: ["Field may not be null."]
    get:
      tags:
        - Inventory
      summary: "Get all inventory items"
      responses:
        "200":
          description: "A list of inventory items"
          schema:
            type: array
            items:
              $ref: "#/definitions/InventoryItemResponse"
          examples:
            application/json:
              - id: 1
                name: "Spark Plug"
                price: "15.99"
              - id: 2
                name: "Air Filter"
                price: "22.50"

  /inventory/{inventory_id}:
    put:
      tags:
        - Inventory
      summary: "Update inventory item by ID"
      parameters:
        - name: inventory_id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/InventoryItemPayload"
          examples:
            application/json:
              name: "Premium Spark Plug"
              price: "18.99"
      responses:
        "200":
          description: "Inventory item updated successfully"
          schema:
            $ref: "#/definitions/InventoryItemResponse"
          examples:
            application/json:
              id: 1
              name: "Premium Spark Plug"
              price: "18.99"
        "400":
          description: "Validation error"
          schema:
            $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json:
              messages:
                price: ["Not a valid number."]
        "404":
          description: "Inventory item not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "inventory not found." # Note: route uses lowercase "inventory"
    delete:
      tags:
        - Inventory
      summary: "Delete inventory item by ID"
      parameters:
        - name: inventory_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Inventory item deleted successfully"
          schema:
            $ref: "#/definitions/MessageResponse"
          examples:
            application/json:
              message: "inventory id: 1, successfully deleted." # Note: route uses lowercase "inventory"
        "404":
          description: "Inventory item not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "inventory not found." # Note: route uses lowercase "inventory"

  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: "Login mechanic"
      description: "Authenticates a mechanic and returns an auth token."
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/MechanicLoginPayload"
          examples:
            application/json:
              email: "jane.smith@example.com"
              password: "anotherSecurePassword"
      responses:
        "200":
          description: "Login successful"
          schema:
            $ref: "#/definitions/AuthTokenResponse"
          examples:
            application/json:
              status: "success"
              message: "Successfully Logged In"
              auth_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJtZWNoYW5pYy0xIiwibmFtZSI6IkphbmUgU21pdGgiLCJpYXQiOjE1MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          description: "Invalid payload"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid payload, expecting username and password" # Route message
        "401":
          description: "Invalid email or password"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid email or password"

  /mechanics/:
    post:
      tags:
        - Mechanics
      summary: "Create a new mechanic"
      # security: - BearerAuth: [] # Route has @mec_token_required commented out
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/MechanicPayload"
          examples:
            application/json:
              name: "Mechanic Bob"
              email: "bob.builder@example.com"
              phone: "555-1122"
              salary: "65000.00"
              password: "fixitFelix"
      responses:
        "201":
          description: "Mechanic created successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
          examples:
            application/json:
              id: 2
              name: "Mechanic Bob"
              email: "bob.builder@example.com"
              phone: "555-1122"
              salary: "65000.00"
              service_tickets: []
        "400":
          description: "Validation error or email already exists"
          schema:
            oneOf:
              - $ref: "#/definitions/ErrorResponse"
              - $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json_exists:
              error: "Email already associated with a mechanic."
            application/json_validation:
              messages:
                salary: ["Not a valid number."]
    get:
      tags:
        - Mechanics
      summary: "Get all mechanics"
      responses:
        "200":
          description: "A list of mechanics"
          schema:
            type: array
            items:
              $ref: "#/definitions/MechanicResponse"
          examples:
            application/json:
              - id: 1
                name: "Jane Smith"
                email: "jane.smith@example.com"
                phone: "555-5678"
                salary: "60000.00"
                service_tickets: []
              - id: 2
                name: "Mechanic Bob"
                email: "bob.builder@example.com"
                phone: "555-1122"
                salary: "65000.00"
                service_tickets: []

  /mechanics/volume/:
    get:
      tags:
        - Mechanics
      summary: "Get mechanics sorted by work volume"
      responses:
        "200":
          description: "A list of mechanics, sorted by number of service tickets"
          schema:
            type: array
            items:
              $ref: "#/definitions/MechanicResponse"
          examples:
            application/json:
              - id: 2 # Assuming Mechanic Bob has more tickets
                name: "Mechanic Bob"
                email: "bob.builder@example.com"
                phone: "555-1122"
                salary: "65000.00"
                service_tickets: [
                  { "id": 102, "vin": "VIN456", "service_date": "2024-07-29", "service_desc": "Brake Replacement"},
                  { "id": 103, "vin": "VIN789", "service_date": "2024-07-30", "service_desc": "Engine Tune-up"}
                ]
              - id: 1
                name: "Jane Smith"
                email: "jane.smith@example.com"
                phone: "555-5678"
                salary: "60000.00"
                service_tickets: [
                  { "id": 101, "vin": "VIN123", "service_date": "2024-07-28", "service_desc": "Oil Change"}
                ]

  /mechanics/{mechanic_id}:
    put:
      tags:
        - Mechanics
      summary: "Update mechanic by ID"
      # security: - BearerAuth: [] # Route has @mec_token_required commented out
      parameters:
        - name: mechanic_id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/MechanicPayload"
          examples:
            application/json:
              name: "Jane A. Smith"
              email: "jane.a.smith@example.com"
              phone: "555-5679"
              salary: "62000.00"
              password: "newSecurePasswordForJane"
      responses:
        "200":
          description: "Mechanic updated successfully"
          schema:
            $ref: "#/definitions/MechanicResponse"
          examples:
            application/json:
              id: 1
              name: "Jane A. Smith"
              email: "jane.a.smith@example.com"
              phone: "555-5679"
              salary: "62000.00"
              service_tickets: []
        "400":
          description: "Validation error"
          schema:
            $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json:
              messages:
                email: ["Not a valid email address."]
        "404":
          description: "Mechanic not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Mechanic not found."
    delete:
      tags:
        - Mechanics
      summary: "Delete mechanic by ID"
      security:
        - BearerAuth: [] # @mec_token_required is active
      parameters:
        - name: mechanic_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Mechanic deleted successfully"
          schema:
            $ref: "#/definitions/MessageResponse"
          examples:
            application/json:
              message: "Mechanic id: 2 successfully deleted by user mechanic-1."
        "400":
          description: "Invalid mechanic ID format"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Invalid mechanic ID format in URL."
        "403":
          description: "Cannot delete the default mechanic"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Cannot delete the default mechanic account."
        "404":
          description: "Mechanic not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "Mechanic not found."
        "500":
          description: "System configuration error (default mechanic not found)"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json:
              error: "System configuration error: Default customer not found. Please contact support." # Note: Error message in route refers to 'customer'

  /service_tickets/:
    post:
      tags:
        - Service Tickets
      summary: "Create a new service ticket"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CreateServiceTicketPayload"
          examples:
            application/json:
              vin: "NEWVIN123456789"
              service_date: "2024-08-01"
              service_desc: "Check engine light diagnosis"
              customer_id: 1
      responses:
        "201":
          description: "Service ticket created successfully"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
          examples:
            application/json:
              id: 104
              vin: "NEWVIN123456789"
              service_date: "2024-08-01"
              service_desc: "Check engine light diagnosis"
              customer_id: 1
              customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
              mechanics: []
              inventory: []
        "400":
          description: "Validation error or VIN already exists"
          schema:
            oneOf:
              - $ref: "#/definitions/ErrorResponse"
              - $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json_vin_exists:
              error: "Service ticket with VIN NEWVIN123456789 already exists"
            application/json_validation:
              messages:
                customer_id: ["Missing data for required field."]
    get:
      tags:
        - Service Tickets
      summary: "Get all service tickets"
      responses:
        "200":
          description: "A list of all service tickets"
          schema:
            type: array
            items:
              $ref: "#/definitions/ServiceTicketResponse"
          examples:
            application/json:
              - id: 101
                vin: "VIN123XYZ"
                service_date: "2024-07-28"
                service_desc: "Annual Checkup"
                customer_id: 1
                customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
                mechanics: [ { id: 1, name: "Mechanic Mike", email: "mike@example.com", phone: "555-0001", salary: "70000.00" } ]
                inventory: [ { inventory_id: 1, quantity: 1, id: 201, inventory: { id: 1, name: "Oil Filter", price: "25.00" } } ]
              - id: 104
                vin: "NEWVIN123456789"
                service_date: "2024-08-01"
                service_desc: "Check engine light diagnosis"
                customer_id: 1
                customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
                mechanics: []
                inventory: []

  /service_tickets/{ticket_id}/assign-mechanic/{mechanic_id}:
    put:
      tags:
        - Service Tickets
      summary: "Assign a mechanic to a service ticket"
      parameters:
        - name: ticket_id
          in: path
          required: true
          type: integer
          format: int64
        - name: mechanic_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Mechanic assigned successfully"
          schema:
            $ref: "#/definitions/MessageWithTicketResponse"
          examples:
            application/json:
              message: "Mechanic Jane Smith (ID: 1) assigned to Ticket ID: 104"
              ticket:
                id: 104
                vin: "NEWVIN123456789"
                service_date: "2024-08-01"
                service_desc: "Check engine light diagnosis"
                customer_id: 1
                customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
                mechanics: [ { id: 1, name: "Jane Smith", email: "jane.smith@example.com", phone: "555-5678", salary: "60000.00" } ]
                inventory: []
        "404":
          description: "Ticket or Mechanic not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json_ticket_not_found:
              error: "Ticket not found."
            application/json_mechanic_not_found:
              error: "Mechanic not found."

  /service_tickets/{ticket_id}/remove-mechanic/{mechanic_id}:
    put:
      tags:
        - Service Tickets
      summary: "Remove a mechanic from a service ticket"
      parameters:
        - name: ticket_id
          in: path
          required: true
          type: integer
          format: int64
        - name: mechanic_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        "200":
          description: "Mechanic removed successfully"
          schema:
            $ref: "#/definitions/MessageWithTicketResponse"
          examples:
            application/json:
              message: "Mechanic Jane Smith (ID: 1) removed from Ticket ID: 104" # Corrected message based on typical remove operations
              ticket:
                id: 104
                vin: "NEWVIN123456789"
                service_date: "2024-08-01"
                service_desc: "Check engine light diagnosis"
                customer_id: 1
                customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
                mechanics: [] # Mechanic is now removed
                inventory: []
        "404":
          description: "Ticket or Mechanic not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json_ticket_not_found:
              error: "Ticket not found."
            application/json_mechanic_not_found:
              error: "Mechanic not found."

  /service_tickets/{ticket_id}/edit/:
    put:
      tags:
        - Service Tickets
      summary: "Edit mechanics assigned to a service ticket"
      description: "Add or remove mechanics from a service ticket using their IDs."
      parameters:
        - name: ticket_id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EditServiceTicketMechanicsPayload"
          examples:
            application/json:
              add_mechanic_ids: [2] # Add Mechanic Bob
              remove_mechanic_ids: [1] # Remove Jane Smith (if she was previously assigned)
      responses:
        "200":
          description: "Mechanics updated successfully for the ticket"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
          examples:
            application/json:
              id: 104
              vin: "NEWVIN123456789"
              service_date: "2024-08-01"
              service_desc: "Check engine light diagnosis"
              customer_id: 1
              customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
              mechanics: [ { id: 2, name: "Mechanic Bob", email: "bob.builder@example.com", phone: "555-1122", salary: "65000.00" } ]
              inventory: []
        "400":
          description: "Validation error"
          schema:
            $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json:
              messages:
                add_mechanic_ids: ["Not a valid list of integers."]
        "404": # Though route doesn't explicitly return 404 for ticket, it's good practice
          description: "Service ticket not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json: # Assuming a generic error if ticket not found during processing
              error: "An error occurred while updating mechanics."


  /service_tickets/{ticket_id}/edit_inventory/:
    put:
      tags:
        - Service Tickets
      summary: "Edit inventory items for a service ticket"
      description: "Add, update, or remove inventory items associated with a service ticket."
      parameters:
        - name: ticket_id
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EditServiceTicketInventoryPayload"
          examples:
            application/json:
              items_to_add_or_update: [
                { "inventory_id": 1, "quantity": 2 }, # Add/Update Oil Filter
                { "inventory_id": 2, "quantity": 4 }  # Add/Update Air Filter
              ]
              remove_inventory_ids: [3] # Remove an item with inventory_id 3 if present
      responses:
        "200":
          description: "Inventory items updated successfully for the ticket"
          schema:
            $ref: "#/definitions/ServiceTicketResponse"
          examples:
            application/json:
              id: 104
              vin: "NEWVIN123456789"
              service_date: "2024-08-01"
              service_desc: "Check engine light diagnosis"
              customer_id: 1
              customer: { id: 1, name: "John Doe", email: "john.doe@example.com", phone: "555-1234" }
              mechanics: [ { id: 2, name: "Mechanic Bob", email: "bob.builder@example.com", phone: "555-1122", salary: "65000.00" } ]
              inventory: [
                { inventory_id: 1, quantity: 2, id: 301, inventory: { id: 1, name: "Oil Filter", price: "25.00" } },
                { inventory_id: 2, quantity: 4, id: 302, inventory: { id: 2, name: "Air Filter", price: "22.50" } }
              ]
        "400":
          description: "Validation error"
          schema:
            $ref: "#/definitions/ValidationErrorResponse"
          examples:
            application/json:
              messages:
                items_to_add_or_update: { "0": { "quantity": ["Quantity must be greater than 0."] } }
        "404":
          description: "Service ticket or inventory item not found"
          schema:
            $ref: "#/definitions/ErrorResponse"
          examples:
            application/json_ticket_not_found:
              error: "Service ticket not found"
            application/json_item_not_found: # If an inventory item in the payload doesn't exist
              error: "Inventory item with ID 999 not found." # Example, actual message might vary