name: Garage-API

on:
  # Recommendation: Trigger deploys on the creation of a new release/tag for better control.
  # Example:
  # release:
  #   types: [created]
  push:
    branches: [main, master] #Setting on Push to main branch, run our jobs


jobs: #The things we want to happen on push

  # Recommendation: Consolidate the build and test jobs into a single 'build-and-test' job to reduce redundancy.
  

build:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12 #setting up python on our build environment adding comment
        
      - name: Create virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate

      # Recommendation: Use actions/cache to cache dependencies and speed up subsequent builds.
      # Example:
      # - name: Cache dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: venv
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      - name: Install our Dependecies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Print debugging information
        run: |
          echo "Python Version: $(python --version)"
          echo "Working Directory: $(pwd)"
          echo "Content of Working Directory: $(ls -l)"
          echo "Contents of site-package: $(ls -l venv/lib/python*/site-packages)"

  # Recommendation: Use artifacts to pass the workspace between jobs instead of checking out the code each time.
  # In the 'build' job, you would add:
  # - name: Upload artifact
  #   uses: actions/upload-artifact@v2
  #   with:
  #     name: my-app
  #     path: .
  #
  # In the 'test' and 'deploy' jobs, you would add:
  # - name: Download artifact
  #   uses: actions/download-artifact@v2
  #   with:
  #     name: my-app

test:
    needs: build
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12 #setting up python on our build environment
        
      - name: Create virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install our Dependecies
        run: |
          python -m pip install --upgrade pip 
          python -m pip install -r requirements.txt

      - name: Run test
        run: python -m unittest discover -s app/static/tests -p 'test_*.py'

deploy:
    needs: test
    runs-on: mac-m3-15.5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12 #setting up python on our build environment
        
      - name: Create virtual Environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install our Dependecies
        run: |
          python -m pip install --upgrade pip 
          python -m pip install -r requirements.txt

      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID}}
          api-key: ${{ secrets.RENDER_API_KEY}}

  # Recommendation: Add a new parallel job for linting with flake8 and formatting with black.
  # Example:
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - run: pip install flake8 black
  #     - run: flake8 .
  #     - run: black --check .